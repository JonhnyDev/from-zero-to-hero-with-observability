version: '2.2'
services:
  apm-server:
    image: docker.elastic.co/apm/apm-server:7.9.3
    container_name: apm-server
    depends_on:
      elasticsearch:
        condition: service_healthy
      kibana:
        condition: service_healthy
    cap_add: ["CHOWN", "DAC_OVERRIDE", "SETGID", "SETUID"]
    cap_drop: ["ALL"]
    ports:
    - 8200:8200
    networks:
    - elastic
    command: >
       apm-server -e
         -E apm-server.rum.enabled=true
         -E setup.kibana.host=kibana:5601
         -E setup.template.settings.index.number_of_replicas=0
         -E apm-server.kibana.enabled=true
         -E apm-server.kibana.host=kibana:5601
         -E output.elasticsearch.hosts=["elasticsearch:9200"]
    healthcheck:
      interval: 10s
      retries: 12
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8200/

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.3
    container_name: elasticsearch
    environment:
    - bootstrap.memory_lock=true
    - cluster.name=docker-cluster
    - cluster.routing.allocation.disk.threshold_enabled=false
    - discovery.type=single-node
    - ES_JAVA_OPTS=-XX:UseAVX=2 -Xms1g -Xmx1g
    ulimits:
      memlock:
        hard: -1
        soft: -1
    volumes:
    - esdata:/usr/share/elasticsearch/data
    ports:
    - 9200:9200
    networks:
    - elastic
    healthcheck:
      interval: 20s
      retries: 10
      test: curl -s http://localhost:9200/_cluster/health | grep -vq '"status":"red"'

  kibana:
    image: docker.elastic.co/kibana/kibana:7.9.3
    container_name: kibana
    depends_on:
      elasticsearch:
        condition: service_healthy
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
    - 5601:5601
    networks:
    - elastic
    healthcheck:
      interval: 10s
      retries: 20
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:5601/api/status

  backend-estimator:
    build: ./backend-estimator
    image: backend-estimator:latest
    container_name: backend-estimator
    ports:
      - "8888:8888"
    networks:
      - elastic
    depends_on:
      apm-server:
        condition: service_healthy
    environment:
      - ELASTIC_APM_SERVICE_NAME=backend-estimator
      - ELASTIC_APM_SERVER_URL=http://apm-server:8200
      - ELASTIC_APM_APPLICATION_PACKAGES=com.riferrei.estimator.*
      - ELASTIC_APM_TRACE_METHODS=com.riferrei.estimator.*
      - ELASTIC_APM_ENABLE_LOG_CORRELATION=true
    healthcheck:
      interval: 10s
      retries: 20
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8888/actuator/health
      
  backend-database:
    build: ./backend-database
    image: backend-database:latest
    container_name: backend-database
    ports:
      - "8080:8080"
    networks:
      - elastic
    depends_on:
      apm-server:
        condition: service_healthy
    environment:
      - ELASTIC_APM_SERVICE_NAME=backend-database
      - ELASTIC_APM_SERVER_URL=http://apm-server:8200
      - ELASTIC_APM_APPLICATION_PACKAGES=com.riferrei.database.*
      - ELASTIC_APM_PROFILING_INFERRED_SPANS_ENABLED=true
      - ELASTIC_APM_ENABLE_LOG_CORRELATION=true
      - BACKEND_ESTIMATOR_URI=http://backend-estimator:8888/estimateValue
    healthcheck:
      interval: 10s
      retries: 20
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:8080/actuator/health
      
  frontend-react:
    build: ./frontend-react
    image: frontend-react:latest
    container_name: frontend-react
    ports:
      - "3000:3000"
    networks:
      - elastic
    depends_on:
      backend-database:
        condition: service_healthy
    healthcheck:
      interval: 10s
      retries: 20
      test: curl --write-out 'HTTP %{http_code}' --fail --silent --output /dev/null http://localhost:3000

volumes:
  esdata:
    driver: local

networks:
  elastic:
    driver: bridge